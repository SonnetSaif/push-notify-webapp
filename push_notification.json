{
  "fqn": "line_display_dashboard",
  "name": "Push Notification",
  "deprecated": false,
  "image": null,
  "description": null,
  "descriptor": {
    "type": "latest",
    "sizeX": 7.5,
    "sizeY": 3,
    "resources": [
      {
        "url": "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js",
        "isModule": false
      },
      {
        "url": "https://www.gstatic.com/firebasejs/9.22.2/firebase-messaging.js",
        "isModule": false
      },
      {
        "url": "https://www.gstatic.com/firebasejs/9.22.2/firebase-app-compat.js",
        "isModule": false
      },
      {
        "url": "https://www.gstatic.com/firebasejs/9.22.2/firebase-messaging-compat.js",
        "isModule": false
      },
      {
        "url": "<<YOUR-PATH-TO>>/firebase-messaging-sw.js",
        "isModule": false
      }
    ],
    "templateHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head> \n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">\n        <title>Push Notification App</title>\n    </head>\n    <body>\n        <h1>Push Notification App</h1>\n        <button id=\"enableNotificationsButton\">Enable Notifications</button>\n    </body>\n</html>",
    "templateCss": "\n\n/*for custom matarial dropdown filter*/\n.custom-icon {\n    position: absolute;\n    right: 0px;\n    top: 50%;\n    transform: translateY(-50%);\n}\n\n/*hiding default svg from mat dropdown*/\n.custom-form-field .mat-mdc-select-arrow svg {\n    display: none;\n}\n\n/*remove space bottom mat-form-field*/\n.mat-mdc-form-field-subscript-wrapper {\n    display: none;\n}\n\n/*border color*/\n.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,\n.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,\n.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing {\n    /*border-color: rgba(125, 125, 125, 0.5);*/\n}\n\n/* Change the border hover color */\n.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__leading,\n.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__notch,\n.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__trailing {\n    /*border-color: rgba(125, 125, 125, 1);*/\n}\n\n.mat-mdc-select-value{\n    /*font-size: 20px;*/\n}\n\n.mdc-text-field--outlined {\n    /*font-size: 20px;*/\n    overflow: hidden;\n}\n\n.datepicker .mat-mdc-text-field-wrapper {\n    height: 40px;\n}\n\n.datepicker .mat-mdc-text-field-wrapper {\n    height: 40px;\n    border-radius: 5px;\n    border: 1px solid rgba(225, 225, 225, 0.4);\n    padding-left: 10px;\n}\n\n.datepicker .mat-mdc-form-field-infix {\n    padding: 6px !important;\n}\n\n.datepicker .mat-mdc-icon-button {\n    /*transform: scale(0.8);*/\n    top: -9px;\n}\n\n.nav-icon-bell {\n    /*transform: scale(1);*/\n    /*transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;*/\n}\n\n/*navbar dropdown coustomize*/\n.nav-dropdown .mat-mdc-form-field-infix {\n    padding-top: 6px !important;\n}\n\n.nav-dropdown .mat-mdc-text-field-wrapper {\n    height: 40px;\n    border-radius: 5px;\n    border: 1px solid rgba(225, 225, 225, 0.4);\n}\n\n\n/*scroll item box-shadow*/\n.list-container {\n    position: relative;\n}\n\n.list-container:before,\n.list-container:after {\n    display: block;\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    height: 12px;\n    z-index: 10;\n    pointer-events: none;\n}\n\n.list-container:before {\n    top: 0;\n    box-shadow: inset 0 12px 12px -12px rgba(0, 0, 0, 1);\n}\n\n.list-container:after {\n    bottom: 0;\n    box-shadow: inset 0 -12px 12px -12px rgba(0, 0, 0, 1);\n}\n\n.list-container.hide-top-shadow:before {\n    box-shadow: none;\n}\n\n.list-container.hide-bottom-shadow:after {\n    box-shadow: none;\n}\n\n/*glare animation*/\n.glareAnimation {\n    position: relative;\n    overflow: hidden;\n}\n\n.glareAnimation:hover {\n    animation: dimPulse 2s infinite 0.4s,hoverBlur 0.4s ease-in-out;\n    cursor: pointer;\n}\n\n\n.glareAnimation::after {\n  content: '';\n  position: absolute;\n  inset: 0;\n  background: linear-gradient(to top, rgba(0, 0, 0, 0.1), currentColor, rgba(0, 0, 0, 0.1));\n  opacity: 0.4;\n  transform: translateX(-200%) rotate(45deg);\n}\n\n.glareAnimation:hover::after {\n    opacity: 0.1;\n    transform: translateX(200%) rotate(45deg);\n    animation: glareMove 0.5s linear;\n}\n\n@keyframes dimPulse {\n    0%,\n    100% {\n        opacity: 1;\n    }\n    50% {\n        opacity: 0.5;\n    }\n}\n@keyframes hoverBlur{\n    0%,\n    100%{\n         filter : blur(0px);\n    }\n    50% {\n        filter : blur(0.7px);\n    }\n}\n@keyframes glareMove {\n    0% {\n        transform: translateX(-100%) rotate(45deg);\n    }\n    100% {\n        transform: translateX(100%) rotate(45deg);\n    }\n}\n@media (min-width: 1280px) and (max-width: 1700px) {\n    .hide-chart {\n        display: none;\n    }\n    .show-chart {\n        display: block;\n    }\n}\n",
    "controllerScript": "self.onInit = function() {\r\n    \r\n    // Firebase Configuration\r\n    const firebaseConfig = {\r\n        apiKey: \"AIzaSyXXXXXX-XXXXXXXXXXXXXXXXXXXXXXX\",\r\n        authDomain: \"your-app.firebaseapp.com\",\r\n        projectId: \"your-app-id\",\r\n        storageBucket: \"your-app.firebasestorage.app\",\r\n        messagingSenderId: \"123456789012\",\r\n        appId: \"1:123456789012:web:xxxxxxxxxxxxxxxxxxxxx\",\r\n        measurementId: \"G-XXXXXXXXXX\"\r\n    };\r\n    \r\n    const vapidKey = \"BE1iXXXXXXXtUuC7KL-XXXXXXXXXXXXXpnZ0hCdoeDp24IFtq0ulRP7mJwJfg_ww_XXXXXXXXXXX-XXXXXXXXXXX\"\r\n    \r\n    // Initialize Firebase\r\n    const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n    \r\n    // Initialize Messaging\r\n    const messaging = firebase.messaging(firebaseApp);\r\n    \r\n    // Function to Initialize Firebase Messaging\r\n    const initializeFirebaseMessaging = () => {\r\n    \r\n        // Request Notification Permission\r\n        const enableNotifications = () => { \r\n            Notification.requestPermission()\r\n            .then((permission) => {\r\n                if (permission === \"granted\") {\r\n                    console.log(\"Notification permission granted.\");\r\n    \r\n                    // Register Service Worker\r\n                    navigator.serviceWorker \r\n                        .register('<<YOUR-PATH-TO>>/firebase-messaging-sw.js', { scope: \"/\" })\r\n                            .then((registration) => {\r\n                                console.log(\"Service Worker registered:\", registration);\r\n    \r\n                                // Get FCM Token\r\n                                messaging.getToken({ vapidKey: vapidKey, serviceWorkerRegistration: registration })\r\n                                    .then((currentToken) => {\r\n                                        if (currentToken) {\r\n                                            console.log(\"FCM Token:\", currentToken);\r\n                                            // Use this token to send messages from your backend\r\n                                            subscribeToTopic(currentToken, \"news\");\r\n                                        } else {\r\n                                            console.error(\"No registration token available. Request permission to generate one.\");\r\n                                        }\r\n                                    })\r\n                                    .catch((err) => {\r\n                                        console.error(\"Error retrieving token:\", err);\r\n                                    });\r\n                            })\r\n                            .catch((err) => {\r\n                                console.error(\"Service Worker registration failed:\", err);\r\n                            });\r\n    \r\n                        // Handle Incoming Messages\r\n                        messaging.onMessage((payload) => {\r\n                            console.log(\"Message received in foreground:\", payload);\r\n    \r\n                            // Display Notification\r\n                            const notificationTitle = payload.data.title || \"New Notification\";\r\n                            const notificationOptions = {\r\n                                body: payload.data.body || \"You have a new message!\",\r\n                            };\r\n                            new Notification(notificationTitle, notificationOptions);\r\n                        });\r\n                    } else {\r\n                        console.error(\"Notification permission denied.\");\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.error(\"Failed to request notification permission:\", err);\r\n                });\r\n            };\r\n        \r\n            // Attach the click event to the button\r\n            document.getElementById(\"enableNotificationsButton\").addEventListener(\"click\", enableNotifications);\r\n        };\r\n        setTimeout(function() {\r\n            initializeFirebaseMessaging();\r\n        }, 100);\r\n\r\n    // Function to subscribe to a topic\r\n    subscribeToTopic = async (fcmToken, topic) => {\r\n        const response = await fetch('http://localhost:1880/subscribe', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ token: fcmToken, topic: topic }),\r\n        });\r\n    \r\n        if (response.ok) {\r\n            console.log('Subscribed to topic successfully', topic);\r\n        } else {\r\n            console.error('Failed to subscribe to topic:', await response.text());\r\n        }\r\n    };\r\n    \r\n    self.onResize();\r\n}\r\n\r\nself.onDataUpdated = function() {}\r\n\r\nself.onResize = function() {}\r\n\r\nself.onDestroy = function() {}",
    "settingsSchema": "",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Attributes card\"}"
  },
  "tags": null
}